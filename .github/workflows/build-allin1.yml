name: Build Allin1

on:
  schedule:
    - cron: 0 12 * * *
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH 连接 Actions'
        required: false
        default: false
        type: boolean

env:
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update -y
        sudo apt-get full-upgrade -y
        sudo apt-get install -y expect dateutils ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib git git-core gperf haveged help2man intltool lib32gcc1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncurses5-dev libreadline-dev libssl-dev libtool libz-dev lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply python-docutils qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        echo "update完成"

    - name: Create new user
      run: |
        sudo adduser "builder" <<EOF
        12345
        12345
        EOF
        echo "新建用户完成"
        expect -c "
        spawn su - builder
        expect \":\"
        send \"12345\r\"
        interact
        "
        echo "用户切换成功"
    - name: Clone source code
      run: |
        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"
        git clone https://github.com/wekingchen/gl-infra-builder.git
        echo "源码抓取完毕"
        cd gl-infra-builder
        python3 setup.py -c config-siflower-18.x.yml
        echo "config-siflower-18.x.yml完毕"
        cd openwrt-18.06/siflower/openwrt-18.06
        ./scripts/gen_config.py target_siflower_gl-sft1200
        rm -rf feeds/packages/libs/boost
        wget 'https://github.com/${{ GITHUB.REPOSITORY }}/raw/main/myfiles/package.zip' --no-check-certificate && unzip -o package.zip && rm -f package.zip
        rm -rf ./feeds/packages/net/xray-core
        svn export https://github.com/keyjsl/openwrt-passwall/branches/wss-multipath/xray-core feeds/packages/net/xray-core
        rm -rf package/GL.iNet
        wget 'https://github.com/${{ GITHUB.REPOSITORY }}/raw/main/myfiles/GLiNet.zip' --no-check-certificate && unzip -o GLiNet.zip && rm -f GLiNet.zip
        # rm -rf target/linux/siflower
        # wget 'https://github.com/${{ GITHUB.REPOSITORY }}/raw/main/myfiles/siflower.zip' --no-check-certificate && unzip -o siflower.zip && rm -f siflower.zip
        git clone https://github.com/jerrykuku/go-aliyundrive-webdav package/go-aliyundrive-webdav
        git clone https://github.com/jerrykuku/luci-app-go-aliyundrive-webdav package/luci-app-go-aliyundrive-webdav
        git clone https://github.com/jerrykuku/lua-maxminddb.git package/lua-maxminddb
        git clone https://github.com/jerrykuku/luci-app-vssr.git package/luci-app-vssr
        git clone -b luci --single-branch https://github.com/xiaorouji/openwrt-passwall package/passwall
        rm -rf feeds/packages/multimedia/aliyundrive-webdav
        svn co https://github.com/messense/aliyundrive-webdav/trunk/openwrt/aliyundrive-webdav feeds/packages/multimedia/aliyundrive-webdav
        rm -rf feeds/luci/applications/luci-app-aliyundrive-webdav
        svn co https://github.com/messense/aliyundrive-webdav/trunk/openwrt/luci-app-aliyundrive-webdav feeds/luci/applications/luci-app-aliyundrive-webdav
        echo "target_siflower_gl-sft1200完毕"
        sed -i "/helloworld/d" "feeds.conf.default"
        echo "src-git helloworld https://github.com/fw876/helloworld.git" >> "feeds.conf.default"
        echo "helloworld完毕"
        ./scripts/feeds update helloworld
        ./scripts/feeds install -a -f -p helloworld
        echo "feeds更新完毕"
        rm -rf .config
        echo "删除配置完毕"
        wget https://github.com/${{ GITHUB.REPOSITORY }}/raw/main/all/.config
        echo "配置抓取完毕"

    - name: Setup Debug Session
      if: ${{ inputs.ssh }}
      uses: csexton/debugger-action@master

    - name: Build source code
      run: |
        cd gl-infra-builder/openwrt-18.06/siflower/openwrt-18.06
        make -j8 download V=s
        echo "下载完毕"
        make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: gl-infra-builder/openwrt-18.06/siflower/openwrt-18.06/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd "/home/runner/work/Actions-SFT1200-OpenWrt/Actions-SFT1200-OpenWrt/gl-infra-builder/openwrt-18.06/siflower/openwrt-18.06/bin/"

        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")-allin1"
        touch release.txt
        echo "::set-output name=status::success"
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: /home/runner/work/Actions-SFT1200-OpenWrt/Actions-SFT1200-OpenWrt/gl-infra-builder/openwrt-18.06/siflower/openwrt-18.06/bin/targets/siflower/openwrt-*squashfs*
        
    - name: Upload firmware to Telegram
      uses: appleboy/telegram-action@v0.1.1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        document: /home/runner/work/Actions-SFT1200-OpenWrt/Actions-SFT1200-OpenWrt/gl-infra-builder/openwrt-18.06/siflower/openwrt-18.06/bin/targets/siflower/openwrt-*squashfs*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 10

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.2.1
      if: ${{ inputs.UPLOAD_RELEASE }} && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
